# Install dependencies only whe needed
FROM node:18-alpine as deps
RUN apk add --no-cache libc6-compat
WORKDIR /usr/src/app
COPY package.json yarn.lock ./
RUN yarn install --frozen-lockfile

# Rebuild the source code only when needed
FROM node:18-alpine as builder
WORKDIR /usr/src/app
COPY --from=deps /usr/src/app/node_modules ./node_modules

COPY . .

RUN yarn build

# Production Image, copy all files and run next
FROM node:18-alpine as runner
WORKDIR /usr/src/app
ENV NODE_ENV production

COPY --from=builder /usr/src/app/public ./public
COPY --from=builder /usr/src/app/.next ./.next
COPY --from=builder /usr/src/app/node_modules ./node_modules
COPY --from=builder /usr/src/app/package.json ./package.json


# ENV NODE_ENV production
# RUN addgroup --system --gid 1001 bloggroup
# RUN adduser --system -uid 1001 bloguser

# Automatically leverage output traces to reduce image size
# COPY --from=builder --chown=bloguser:bloggroup /app/.next/standalone ./
# COPY --from=builder --chown=bloguser:bloggroup /app/.next/static ./.next/static

EXPOSE 3000
CMD ["yarn", "start"]